name: PR
on:
  pull_request:
    paths:
      - "**.go"
      - "**.yml"
      - "Makefile"
env:
  GOPROXY: https://proxy.golang.org
jobs:
  # Runs before all other jobs
  # builds the minikube binaries
  build_minikube:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Download Dependencies
        run: go mod download
      - name: Build Binaries
        run: |
          make minikube-linux-amd64
          make e2e-linux-amd64
          make out/minikube-windows-amd64.exe
          make out/e2e-windows-amd64.exe
          cp -r test/integration/testdata ./out
          whoami
          echo github ref $GITHUB_REF
          echo workflow $GITHUB_WORKFLOW
          echo home $HOME
          echo event name $GITHUB_EVENT_NAME
          echo workspace $GITHUB_WORKSPACE
          echo "end of debug stuff"
          echo $(which jq)
      - uses: actions/upload-artifact@v1
        with:
          name: minikube_binaries
          path: out
  # They will run in parallel and use the binaries in previous step
  functional_test_docker_windows:
    needs: [build_minikube]
    env:
      TIME_ELAPSED: time
      JOB_NAME: "functional_docker_windows"
      GOPOGH_RESULT: ""
      SHELL: "/bin/bash" # To prevent https://github.com/kubernetes/minikube/issues/6643
    runs-on: [self-hosted, Windows, X64]
    steps:
      - name: Download Binaries
        uses: actions/download-artifact@v1
        with:
          name: minikube_binaries
      - name: Install Dependencies
        shell: bash
        run: |
          choco install -y jq || true
          choco install -y golang || true
          curl -LO https://github.com/medyagh/gopogh/releases/download/v0.1.19/gopogh.exe
          move gopogh.exe C:\ProgramData\chocolatey\bin
          docker info
          go version
      - name: Run Integration Test
        continue-on-error: true
        shell: powershell
        run: |
          cd minikube_binaries
          New-Item -Path "report" -ItemType Directory
          New-Item -Path "testhome" -ItemType Directory
          START_TIME=(GET-DATE)
          $env:KUBECONFIG="$pwd.Path/testhome/kubeconfig"
          $env:MINIKUBE_HOME="$pwd.Path/testhome"
          ./e2e-windows-amd64.exe -minikube-start-args=--driver=docker -test.timeout=35m -test.v -test.run TestFunctional -binary=./minikube-windows-amd64.exe > ./report/testout.txt 2>&1
          $END_TIME=(GET-DATE)
          $DURATION=(NEW-TIMESPAN -Start $START_TIME -End $END_TIME)
          $MINS=($DURATION.TotalMinutes)
          $TIME_ELAPSED="$MINS mins"
          $env:TIME_ELAPSED=$TIME_ELAPSED
          echo ::set-env name=TIME_ELAPSED::$TIME_ELAPSED
      - name: Generate HTML Report
        shell: powershell
        run: |
          cd minikube_binaries
          go tool test2json -t < ./report/testout.txt > ./report/testout.json
          STAT=(gopogh -in ./report/testout.json -out ./report/testout.html -name "$JOB_NAME $GITHUB_REF" -repo "$GITHUB_REPOSITORY"  -details "$GITHUB_SHA")
          echo status: ${STAT}
          FailNum=(echo $STAT | jq '.NumberOfFail')
          TestsNum=(echo $STAT | jq '.NumberOfTests')
          GOPOGH_RESULT="$JOB_NAME : completed with $FailNum / $TestsNum failures in $TIME_ELAPSED"
          $env:GOPOGH_RESULT=$GOPOGH_RESULT
          echo ::set-env name=GOPOGH_RESULT::$GOPOGH_RESULT
          $env:STAT=$STAT
          echo ::set-env name=STAT::${STAT}
      - uses: actions/upload-artifact@v1
        with:
          name: functional_docker_windows
          path: minikube_binaries/report
      - name: The End Result - functional on docker windows
        shell: powershell
        run: |
          echo $GOPOGH_RESULT
          numFail=(echo $STAT | jq '.NumberOfFail')
          echo "----------------$numFail Failures----------------------------"
          echo $STAT | jq '.FailedTests'
          echo "-------------------------------------------------------"
          numPass=(echo $STAT | jq '.NumberOfPass')
          echo "*** $numPass Passed ***"
          If ($numFail -gt 0) {exit 2}  Else {echo 'success'}
  # After all integration tests finished
  # collect all the reports and upload them
  upload_all_reports:
    if: always()
    needs:
      [
        functional_test_docker_windows,
      ]
    runs-on: ubuntu-18.04
    steps:
      - name: download all reports
        uses: actions/download-artifact@v2-preview
      - name: upload all reports
        shell: bash {0}
        continue-on-error: true
        run: |
          mkdir -p all_reports
          ls -lah
          cp -r ./functional_test_docker_windows ./all_reports/
          
      - uses: actions/upload-artifact@v1
        with:
          name: all_reports
          path: all_reports
