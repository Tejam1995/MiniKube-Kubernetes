name: PR
on:
  pull_request:
    paths:
      - "**.go"
      - "**.yml"
      - "Makefile"
env:
  GOPROXY: https://proxy.golang.org
jobs:
  # Runs before all other jobs
  # builds the minikube binaries
  build_minikube:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Download Dependencies
        run: go mod download
      - name: Build Binaries
        run: |
          make out/minikube-windows-amd64.exe
          make out/e2e-windows-amd64.exe
          cp -r test/integration/testdata ./out
          whoami
          echo github ref $GITHUB_REF
          echo workflow $GITHUB_WORKFLOW
          echo home $HOME
          echo event name $GITHUB_EVENT_NAME
          echo workspace $GITHUB_WORKSPACE
          echo "end of debug stuff"
          echo $(which jq)
      - uses: actions/upload-artifact@v1
        with:
          name: minikube_binaries
          path: out
  # They will run in parallel and use the binaries in previous step
  functional_test_docker_windows:
    needs: [build_minikube]
    env:
      TIME_ELAPSED: time
      JOB_NAME: "functional_docker_windows"
      GOPOGH_RESULT: ""
      SHELL: "/bin/bash" # To prevent https://github.com/kubernetes/minikube/issues/6643
    runs-on: [self-hosted, Windows, X64]
    steps:
      - name: Download Binaries
        uses: actions/download-artifact@v1
        with:
          name: minikube_binaries
      - name: info
        shell: powershell
        run: |
          docker info
          go version
      - name: Run Integration Test
        continue-on-error: true
        shell: powershell
        run: |
          cd minikube_binaries
          New-Item -Force -Path "report" -ItemType Directory
          New-Item -Force -Path "testhome" -ItemType Directory
          $START_TIME=(GET-DATE)
          $env:KUBECONFIG="${pwd}\testhome\kubeconfig"
          $env:MINIKUBE_HOME="${pwd}\testhome"
          $ErrorActionPreference = "SilentlyContinue"
          ./e2e-windows-amd64.exe --minikube-start-args="--driver=docker" --test.timeout=35m --test.v --test.run=TestFunctional --binary="./minikube-windows-amd64.exe" | Out-File -FilePath .\report\testout.txt -Encoding ASCII
          $END_TIME=(GET-DATE)
          echo $END_TIME
          $DURATION=(NEW-TIMESPAN -Start $START_TIME -End $END_TIME)
          echo $DURATION
          $MINS=($DURATION.TotalMinutes)
          echo $MINS
          $T_ELAPSED="$MINS mins"
          echo "----"
          echo $T_ELAPSED
          echo "----"
          echo "::set-env name=TIME_ELAPSED::$TIME_ELAPSED"
      - name: Generate HTML Report
        shell: powershell
        run: |
          $ErrorActionPreference = "SilentlyContinue"
          cd minikube_binaries
          $ST=(docker run --rm -v ${PWD}\report:/data medyagh/gopogh:latest ./text2html.sh)
          $FailNum=(echo $ST | jq '.NumberOfFail')
          $TestsNum=(echo $ST | jq '.NumberOfTests')
          $GRESULT="$JOB_NAME : completed with $FailNum / $TestsNum failures in $TIME_ELAPSED"
          echo ::set-env name=GOPOGH_RESULT::$GRESULT
          echo ::set-env name=STATUS::$ST
      - uses: actions/upload-artifact@v1
        with:
          name: functional_docker_windows
          path: minikube_binaries/report
      - name: The End Result - functional on docker windows
        shell: powershell
        run: |
          echo $ENV:GOPOGH_RESULT
          echo $ENV:STATUS
          $numFail=(echo $ENV:STATUS} | jq '.NumberOfFail')
          echo "----------------$numFail Failures----------------------------"
          echo $ENV:STATUS | jq '.FailedTests'
          echo "-------------------------------------------------------"
          $numPass=(echo $ENV:STATUS | jq '.NumberOfPass')
          echo "*** ${numPass} Passed ***"
          If ($numFail -gt 0) {exit 2}  Else {echo 'success'}
          If ($numPass -eq 0) {exit 2}
  # After all integration tests finished
  # collect all the reports and upload them
  upload_all_reports:
    if: always()
    needs:
      [
        functional_test_docker_windows,
      ]
    runs-on: ubuntu-18.04
    steps:
      - name: download all reports
        uses: actions/download-artifact@v2-preview
      - name: upload all reports
        shell: bash {0}
        continue-on-error: true
        run: |
          mkdir -p all_reports
          ls -lah
          cp -r ./functional_test_docker_windows ./all_reports/
          
      - uses: actions/upload-artifact@v1
        with:
          name: all_reports
          path: all_reports
