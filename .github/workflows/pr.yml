name: PR
on:
  pull_request:
    paths:
      - "**.go"
      - "**.yml"
      - "Makefile"
env:
  GOPROXY: https://proxy.golang.org
jobs:
  # Runs before all other jobs
  # builds the minikube binaries
  build_minikube:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Download Dependencies
        run: go mod download
      - name: Build Binaries
        run: |
          make e2e-windows-amd64.exe
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-windows-amd64.exe
          mv minikube-windows-amd64.exe ./out/
          cp -r test/integration/testdata ./out
          whoami
          echo github ref $GITHUB_REF
          echo workflow $GITHUB_WORKFLOW
          echo home $HOME
          echo event name $GITHUB_EVENT_NAME
          echo workspace $GITHUB_WORKSPACE
          echo "end of debug stuff"
          echo $(which jq)
      - uses: actions/upload-artifact@v1
        with:
          name: minikube_binaries
          path: out
  # They will run in parallel and use the binaries in previous step
  functional_test_docker_windows:
    needs: [build_minikube]
    env:
      TIME_ELAPSED: time
      JOB_NAME: "functional_docker_windows"
      GOPOGH_RESULT: ""
      SHELL: "/bin/bash" # To prevent https://github.com/kubernetes/minikube/issues/6643
    runs-on: [self-hosted, windows-10]
    steps:
      - name: Clean up
        continue-on-error: false
        # bash {0} to allow test to continue to next step. in case of
        shell: bash {0}
        run: |
          ls -lah
          rm -rf minikube_binaries || true
          ls -lah 
      - name: Download Binaries
        uses: actions/download-artifact@v1
        with:
          name: minikube_binaries
      - name: info
        shell: powershell
        run: |
          docker info
      - name: Run Integration Test
        continue-on-error: false
        # bash {0} to allow test to continue to next step. in case of
        shell: bash {0}
        run: |
          pwd
          ls
          cd minikube_binaries
          ls
          mkdir -p report
          rm -rf testhome || true
          mkdir -p testhome
          START_TIME=$(date -u +%s)
          KUBECONFIG=$(pwd)/testhome/kubeconfig MINIKUBE_HOME=$(pwd)/testhome ./e2e-windows-amd64.exe -minikube-start-args=--vm-driver=docker  -test.run TestFunctional -test.timeout=30m -test.v -timeout-multiplier=1.5 -binary=./minikube-windows-amd64.exe 2>&1 | tee ./report/testout.txt
          END_TIME=$(date -u +%s)
          TIME_ELAPSED=$(($END_TIME-$START_TIME))
          min=$((${TIME_ELAPSED}/60))
          sec=$((${TIME_ELAPSED}%60))
          TIME_ELAPSED="${min} min $sec seconds "
          echo ::set-env name=TIME_ELAPSED::${TIME_ELAPSED}
      # - name: Run Integration Test in powershell
      #   continue-on-error: true
      #   shell: powershell
      #   run: |
      #     cd minikube_binaries
      #     New-Item -Force -Path "report" -ItemType Directory
      #     New-Item -Force -Path "testhome" -ItemType Directory
      #     $START_TIME=(GET-DATE)
      #     $env:KUBECONFIG="${pwd}\testhome\kubeconfig"
      #     $env:MINIKUBE_HOME="${pwd}\testhome"
      #     $ErrorActionPreference = "SilentlyContinue"
      #     ./e2e-windows-amd64.exe --minikube-start-args="--driver=docker" --test.timeout=35m --test.v --test.run=TestFunctional --binary="./minikube-windows-amd64.exe" | Out-File -FilePath .\report\testout.txt -Encoding ASCII
      #     $END_TIME=(GET-DATE)
      #     echo $END_TIME
      #     $DURATION=(NEW-TIMESPAN -Start $START_TIME -End $END_TIME)
      #     echo $DURATION
      #     $MINS=($DURATION.TotalMinutes)
      #     echo $MINS
      #     $T_ELAPSED="$MINS mins"
      #     echo "----"
      #     echo $T_ELAPSED
      #     echo "----"
      #     echo "::set-env name=TIME_ELAPSED::$TIME_ELAPSED"
      - name: Generate HTML Report
        shell: bash
        run: |
          cd minikube_binaries
          export PATH=${PATH}:`go env GOPATH`/bin
          go tool test2json -t < ./report/testout.txt > ./report/testout.json || true
          STAT=$(gopogh -in ./report/testout.json -out ./report/testout.html -name "${JOB_NAME} ${GITHUB_REF}" -repo "${GITHUB_REPOSITORY}"  -details "${GITHUB_SHA}")  || true
          echo status: ${STAT}
          FailNum=$(echo $STAT | jq '.NumberOfFail')
          TestsNum=$(echo $STAT | jq '.NumberOfTests')
          GOPOGH_RESULT="${JOB_NAME} : completed with ${FailNum} / ${TestsNum} failures in ${TIME_ELAPSED}"
          echo "::set-env name=GOPOGH_RESULT::${GOPOGH_RESULT}"
          echo "::set-env name=STAT::${STAT}"
      - uses: actions/upload-artifact@v1
        with:
          name: functional_docker_windows
          path: minikube_binaries/report
      - name: The End Result - functional on docker windows
        shell: powershell
        run: |
          $numFail=(echo $ENV:STATUS | jq '.NumberOfFail')
          echo "----------------$numFail Failures----------------------------"
          echo $ENV:STATUS | jq '.FailedTests'
          echo "-------------------------------------------------------"
          $numPass=(echo $ENV:STATUS | jq '.NumberOfPass')
          echo "*** ${numPass} Passed ***"
          If ($numFail -gt 0) {exit 2}  Else {echo 'success'}
          If ($numPass -eq 0) {exit 2}
  # After all integration tests finished
  # collect all the reports and upload them
  upload_all_reports:
    if: always()
    needs:
      [
        functional_test_docker_windows,
      ]
    runs-on: ubuntu-18.04
    steps:
      - name: download all reports
        uses: actions/download-artifact@v2-preview
      - name: upload all reports
        shell: bash {0}
        continue-on-error: true
        run: |
          mkdir -p all_reports
          ls -lah
          cp -r ./functional_test_docker_windows ./all_reports/          
      - uses: actions/upload-artifact@v1
        with:
          name: all_reports
          path: all_reports
