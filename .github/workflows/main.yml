name: CI
on: [pull_request]
jobs:
  docker_ubuntu_16_04:
    env:
      TIME_ELAPSED: time
      JOB_NAME: "Docker_Ubuntu_16_04"
      COMMIT_STATUS: ""
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - name: build binaries
      run : |
        make minikube-linux-amd64
        make e2e-linux-amd64
        mkdir -p report
        mkdir -p testhome
        pwd
        ls -lah
        cp -r test/integration/testdata ./
        ls -lah
        whoami
        echo github ref $GITHUB_REF
        echo workflow $GITHUB_WORKFLOW
        echo home $HOME
        echo event name $GITHUB_EVENT_NAME
        echo workspace $GITHUB_WORKSPACE
        echo "end of debug stuff"
        
    - name: install gopogh
      run: |
        cd /tmp
        GO111MODULE="on" go get github.com/medyagh/gopogh@v0.0.17 || true
        cd -
    - name: run integration test
      run: |
        START_TIME=$(date -u +%s)
        KUBECONFIG=$(pwd)/testhome/kubeconfig MINIKUBE_HOME=$(pwd)/testhome ./out/e2e-linux-amd64 -minikube-start-args=--vm-driver=docker -expected-default-driver= -test.timeout=70m -test.v -binary=out/minikube-linux-amd64 2>&1 | tee ./report/testout.txt
        END_TIME=$(date -u +%s)
        TIME_ELAPSED=$(($END_TIME-$START_TIME)) 
        min=$((${TIME_ELAPSED}/60))
        sec=$((${TIME_ELAPSED}%60))
        TIME_ELAPSED="${min} min $sec seconds "
        echo ::set-env name=TIME_ELAPSED::${TIME_ELAPSED}
    - name: generate gopogh report
      run: |
        export PATH=${PATH}:`go env GOPATH`/bin
        go tool test2json -t < ./report/testout.txt > ./report/testout.json || true
        STAT=$(gopogh -in ./report/testout.json -out ./report/testout.html -name " $GITHUB_REF" -repo "${JOB_NAME} ${GITHUB_REF} ${GITHUB_REPOSITORY}"  -details "${GITHUB_SHA}")  || true
        echo status: ${STAT}
        COMMIT_STATUS="${JOB_NAME} : Completed with ${STAT} in ${TIME_ELAPSED}"
        echo ::set-env name=COMMIT_STATUS::${COMMIT_STATUS}
    - name: The End Result
      run: |
        echo time elapsed is ${TIME_ELAPSED}
        echo END RESULT IS ${COMMIT_STATUS}
    - uses: actions/upload-artifact@v1
      with:
        name: docker_ubuntu_16_04
        path: report
  docker_ubuntu_18_04:
    env:
      TIME_ELAPSED: time
      JOB_NAME: "Docker_Ubuntu_18_04"
      COMMIT_STATUS: ""
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: build binaries
      run : |
        make minikube-linux-amd64
        make e2e-linux-amd64
        mkdir -p report
        mkdir -p testhome
        pwd
        ls -lah
        cp -r test/integration/testdata ./
        ls -lah
        whoami
    - name: install gopogh
      run: |
        cd /tmp
        GO111MODULE="on" go get github.com/medyagh/gopogh@v0.0.17 || true
        cd -
    - name: run integration test
      run: |
        START_TIME=$(date -u +%s)
        KUBECONFIG=$(pwd)/testhome/kubeconfig MINIKUBE_HOME=$(pwd)/testhome ./out/e2e-linux-amd64 -minikube-start-args=--vm-driver=docker -expected-default-driver= -test.timeout=70m -test.v -binary=out/minikube-linux-amd64 2>&1 | tee ./report/testout.txt
        END_TIME=$(date -u +%s)
        TIME_ELAPSED=$(($END_TIME-$START_TIME)) 
        min=$((${TIME_ELAPSED}/60))
        sec=$((${TIME_ELAPSED}%60))
        TIME_ELAPSED="${min} min $sec seconds"
        echo ::set-env name=TIME_ELAPSED::${TIME_ELAPSED}
    - name: generate gopogh report
      run: |
        export PATH=${PATH}:`go env GOPATH`/bin
        go tool test2json -t < ./report/testout.txt > ./report/testout.json || true
        STAT=$(gopogh -in ./report/testout.json -out ./report/testout.html -name " $GITHUB_REF" -repo "${JOB_NAME} ${GITHUB_REF} ${GITHUB_REPOSITORY}"  -details "${GITHUB_SHA}")  || true
        echo status: ${STAT}
        COMMIT_STATUS="${JOB_NAME} : Completed with ${STAT} in ${TIME_ELAPSED}"
        echo ::set-env name=COMMIT_STATUS::${COMMIT_STATUS}
    - name: The End Result
      run: |
        echo time elapsed is ${TIME_ELAPSED}
        echo END RESULT IS ${COMMIT_STATUS}
    - uses: actions/upload-artifact@v1
      with:
        name: docker_ubuntu_18_04
        path: report
  none_ubuntu16_04:
    env:
      TIME_ELAPSED: time
      JOB_NAME: "None_Ubuntu_16_04"
      COMMIT_STATUS: ""
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - name: build binaries
      run : |
        make minikube-linux-amd64
        make e2e-linux-amd64
        mkdir -p report
        mkdir -p testhome
        pwd
        ls -lah
        cp -r test/integration/testdata ./
        ls -lah
        whoami
    - name: install gopogh
      run: |
        cd /tmp
        GO111MODULE="on" go get github.com/medyagh/gopogh@v0.0.17 || true
        cd -
    - name: run integration test
      run: |
        START_TIME=$(date -u +%s)
        KUBECONFIG=$(pwd)/testhome/kubeconfig MINIKUBE_HOME=$(pwd)/testhome sudo -E ./out/e2e-linux-amd64 -minikube-start-args=--vm-driver=none -expected-default-driver= -test.timeout=70m -test.v -binary=out/minikube-linux-amd64 2>&1 | tee ./report/testout.txt
        END_TIME=$(date -u +%s)
        TIME_ELAPSED=$(($END_TIME-$START_TIME)) 
        min=$((${TIME_ELAPSED}/60))
        sec=$((${TIME_ELAPSED}%60))
        TIME_ELAPSED="${min} min $sec seconds"
        echo ::set-env name=TIME_ELAPSED::${TIME_ELAPSED}
    - name: generate gopogh report
      run: |
        export PATH=${PATH}:`go env GOPATH`/bin
        go tool test2json -t < ./report/testout.txt > ./report/testout.json || true
        STAT=$(gopogh -in ./report/testout.json -out ./report/testout.html -name " $GITHUB_REF" -repo "${JOB_NAME} ${GITHUB_REF} ${GITHUB_REPOSITORY}"  -details "${GITHUB_SHA}")  || true
        echo status: ${STAT}
        COMMIT_STATUS="${JOB_NAME} : Completed with ${STAT} in ${TIME_ELAPSED}"
        echo ::set-env name=COMMIT_STATUS::${COMMIT_STATUS}
    - name: The End Result
      run: |
        echo time elapsed is ${TIME_ELAPSED}
        echo END RESULT IS ${COMMIT_STATUS}
    - uses: actions/upload-artifact@v1
      with:
        name: none_ubuntu16_04
        path: report
  podman_ubuntu_18_04:
      env:
        TIME_ELAPSED: time
        JOB_NAME: "Podman_Ubuntu_18_04"
        COMMIT_STATUS: ""
      runs-on: ubuntu-18.04
      steps:
      - uses: actions/checkout@v2
      - name: install podman
        run: |
          . /etc/os-release
          sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
          wget -q https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_${VERSION_ID}/Release.key -O- | sudo apt-key add -
          sudo apt-key add - < Release.key || true
          sudo apt-get update -qq
          sudo apt-get -qq -y install podman
      - name: build binaries
        run : |
          make minikube-linux-amd64
          make e2e-linux-amd64
          mkdir -p report
          mkdir -p testhome
          pwd
          ls -lah
          cp -r test/integration/testdata ./
          cp -r test/integration/testdata ./
          ls -lah
          whoami
      - name: install gopogh
        run: |
          cd /tmp
          GO111MODULE="on" go get github.com/medyagh/gopogh@v0.0.17 || true
          cd -
      - name: run integration test
        run: |
          START_TIME=$(date -u +%s)
          KUBECONFIG=$(pwd)/testhome/kubeconfig MINIKUBE_HOME=$(pwd)/testhome sudo -E ./out/e2e-linux-amd64 -minikube-start-args=--vm-driver=podman -expected-default-driver= -test.timeout=70m -test.v -binary=out/minikube-linux-amd64 2>&1 | tee ./report/testout.txt
          END_TIME=$(date -u +%s)
          TIME_ELAPSED=$(($END_TIME-$START_TIME)) 
          min=$((${TIME_ELAPSED}/60))
          sec=$((${TIME_ELAPSED}%60))
          TIME_ELAPSED="${min} min $sec seconds"
          echo ::set-env name=TIME_ELAPSED::${TIME_ELAPSED}
      - name: generate gopogh report
        run: |
          export PATH=${PATH}:`go env GOPATH`/bin
          go tool test2json -t < ./report/testout.txt > ./report/testout.json || true
          STAT=$(gopogh -in ./report/testout.json -out ./report/testout.html -name " $GITHUB_REF" -repo "${JOB_NAME} ${GITHUB_REF} ${GITHUB_REPOSITORY}"  -details "${GITHUB_SHA}")  || true
          echo status: ${STAT}
          COMMIT_STATUS="${JOB_NAME} : Completed with ${STAT} in ${TIME_ELAPSED}"
          echo ::set-env name=COMMIT_STATUS::${COMMIT_STATUS}
      - name: The End Result
        run: |
          echo time elapsed is ${TIME_ELAPSED}
          echo END RESULT IS ${COMMIT_STATUS}
      - uses: actions/upload-artifact@v1
        with:
          name: podman_ubuntu_18_04
          path: report
  windows_amd_64:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: build binaries
      run : |
        echo "::add-path::$GOPATH\bin"
        make minikube-windows-amd64.exe
        make e2e-windows-amd64.exe
    - name: install gopogh
      run: |
      #  go get github.com/medyagh/gopogh@v0.0.17
      #  cd -
      env:
        GO111MODULE: on
    - name: run integration test
      run: |
        mkdir \testhome
        SET "MINIKUBE_HOME=\testhome" & out/e2e-windows-amd64.exe --expected-default-driver=hyperv -minikube-start-args="--vm-driver=hyperv --hyperv-virtual-switch=primary-virtual-switch" -binary=out/minikube-windows-amd64.exe -test.v -test.timeout=65m
        
    - name: generate gopogh report
      run: |
        echo "{}" > ./report/testout.json
        go tool test2json -t > ./report/testout.json
        Get-Content ./report/testout.txt | ./report/testout.json
        gopogh -in ./report/testout.json -out ./report/testout.html -name "docker ubuntu" -repo github.com/kubernetes/minikube/
    - uses: actions/upload-artifact@v1
      with:
        name: none_on_ubuntu_latest_report
        path: report
        
  upload_all_reports:
    needs: [docker_ubuntu_16_04,docker_ubuntu_18_04,none_ubuntu16_04,podman_ubuntu_18_04]
    runs-on: ubuntu-18.04
    steps:
    - name: download results docker_ubuntu_16_04
      uses: actions/download-artifact@v1
      with:
        name: docker_ubuntu_16_04
    - name: see if report is there
      shell: bash
      run: |
        pwd
        ls -lah
        ls -lah docker_ubuntu_16_04
        mkdir -p all_reports
        cp -r docker_ubuntu_16_04 ./all_reports/
    - name: download results docker_ubuntu_18_04
      uses: actions/download-artifact@v1
      with:
        name: docker_ubuntu_18_04
    - name: see if report is there
      shell: bash
      run: |
        pwd
        ls -lah
        ls -lah docker_ubuntu_18_04
        mkdir -p all_reports
        cp -r docker_ubuntu_18_04 ./all_reports/
    - name: download results none_ubuntu16_04
      uses: actions/download-artifact@v1
      with:
        name: none_ubuntu16_04
    - name: see if report is there
      shell: bash
      run: |
        pwd
        ls -lah
        ls -lah none_ubuntu16_04
        mkdir -p all_reports
        cp -r none_ubuntu16_04 ./all_reports/

    - name: download results podman_ubuntu_18_04
      uses: actions/download-artifact@v1
      with:
        name: podman_ubuntu_18_04
    - name: see if report is there
      shell: bash
      run: |
        pwd
        ls -lah
        ls -lah podman_ubuntu_18_04
        mkdir -p all_reports
        cp -r podman_ubuntu_18_04 ./all_reports/
    - uses: actions/upload-artifact@v1
      with:
        name: all_reports
        path: all_reports
